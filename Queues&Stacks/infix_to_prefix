#include <iostream>
#include <stack>
#include <string>
#include <cstring>
#include <queue>
#include <list>
#include <vector>
using namespace std;

string infix_to_postfix(string str)
{
	stack<char> s;
	string result;

	for (int i = 0; i < str.length(); i++)
	{
		if (str[i] == '+' || str[i] == '-' || str[i] == '/' || str[i] == '*')
		{
			if (s.empty())
				s.push(str[i]);
			else
			{
				if (str[i] == '/' || str[i] == '*')
				{
					while (s.top() == '+' || s.top() == '-' || s.top() == '*' || s.top() == '/')
					{
						result += s.top();
						s.pop();
						if (s.empty())
							break;

					}
				}
				else
				{
					if (str[i] == '+' || str[i] == '-')
					{
						while (s.top() == '+' || s.top() == '-')
						{
							result += s.top();
							s.pop();
							if (s.empty())
								break;
						}
					}
				}
				s.push(str[i]);
			}
		}
		else if (str[i] == '(')
			s.push(str[i]);
		else if (str[i] != ')')
			result += str[i];
		else if (str[i] == ')')
		{
			while (s.top() != '(' && !s.empty())
			{
				result += s.top();
				s.pop();
			}
			s.pop();
		}
	}
	while (!s.empty())
	{
		result += s.top(); s.pop();
	}
	return result;
}
string infix_to_prefix(string str)
{
	string result;

	for (int k = str.length() - 1; k >= 0; k--)
	{
		if (str[k] == '(')
			str[k] = ')';
		else if (str[k] == ')')
			str[k] = '(';
		result += str[k];
	}
	result = infix_to_postfix(result);
	reverse(result.begin(), result.end());

	return result;

}


int main() {
	cout << infix_to_postfix("A+B*C+D");
	cout << endl;
	//cout << infix_to_prefix("A*B+C/D");
}
