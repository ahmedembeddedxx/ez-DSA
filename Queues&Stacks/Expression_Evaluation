#include <iostream>
#include <string>
#include <cstring>
using namespace std;


template <class T>
class Stack {
	int top;
	int size;
	T* arr;
public:
	Stack(int size)
	{
		top = -1;
		this->size = size;
		arr = new T[size];
	}
	bool isFull()
	{
		return (top == (size - 1));
	}
	bool isEmpty()
	{
		return top == -1;
	}
	void push(T i)
	{
		if (isFull())
			return;
		arr[++top] = i;
	}
	void pop()
	{
		if (isEmpty())
			return;
		--top;
	}
	T getTop()
	{
		return arr[top];
	}
	void print()
	{
		for (int i = top; i >= 0; i--)
			cout << arr[i] << ' ' << endl;
		cout << endl;
	}

};
bool isOperator(char c)
{
	return (c == '+' || c == '-' || c == '*' || c == '/');
}
int getPrecedence(char c)
{
	if (c == '+' || c == '-')
		return 1;
	if (c == '*' || c == '/')
		return 2;
	return 0;
}
string toPostfix(string& infix)
{
	Stack<char> s1(20);
	string postfix = "";

	for (int i = 0; i < infix.length(); i++)
	{
		if (isalnum(infix[i]))
			postfix += infix[i];
		else if (infix[i] == '(')
			s1.push(infix[i]);
		else if (infix[i] == ')')
		{
			while (!s1.isEmpty() && s1.getTop() != '(')
			{
				postfix += s1.getTop();
				s1.pop();
			}
			if (!s1.isEmpty() && s1.getTop() == '(')
				s1.pop();
		}
		else if (isOperator(infix[i]))
		{
			while (!s1.isEmpty() && s1.getTop() != '(' && getPrecedence(s1.getTop()) >= getPrecedence(infix[i])) {
				postfix += s1.getTop();
				s1.pop();
			}
			s1.push(infix[i]);
		}
	}
	while (!s1.isEmpty()) {
		postfix += s1.getTop();
		s1.pop();
	}
	return postfix;
}
string toPrefix(string& infix)
{
	string prefix = "";
	for (int i = infix.length() - 1; i >= 0; i--)
	{
		if (infix[i] == ')')
			prefix += ('(');
		else if (infix[i] == '(')
			prefix += (')');
		else
			prefix += (infix[i]);
	}
	prefix = toPostfix(prefix);
	reverse(prefix.begin(), prefix.end());
	return prefix;
}



int main()
{
	string x = "(a+b)*c";
	cout << toPostfix(x) << endl;
	cout << toPrefix(x) << endl;
}
