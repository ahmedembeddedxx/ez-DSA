#include <iostream>
#include <vector>
using namespace std;

class MaxHeap {
private:
    vector<int> heap;

    void heapifyUp(int index) {
        while (index > 0) {
            int parentIndex = (index - 1) / 2;
            if (heap[index] > heap[parentIndex]) {
                swap(heap[index], heap[parentIndex]);
                index = parentIndex;
            } else {
                break;
            }
        }
    }

    void heapifyDown(int index) {
        while (true) {
            int leftChildIndex = 2 * index + 1;
            int rightChildIndex = 2 * index + 2;
            int largest = index;

            if (leftChildIndex < heap.size() && heap[leftChildIndex] > heap[largest]) {
                largest = leftChildIndex;
            }

            if (rightChildIndex < heap.size() && heap[rightChildIndex] > heap[largest]) {
                largest = rightChildIndex;
            }

            if (largest != index) {
                swap(heap[index], heap[largest]);
                index = largest;
            } else {
                break;
            }
        }
    }

public:
    void insert(int value) {
        heap.push_back(value);
        heapifyUp(heap.size() - 1);
    }
	void deleteAtIndex(int index) {
		if (index < 0 || index >= heap.size()) {
			cout << "Invalid index." << endl;
			return;
		}

		heap[index] = heap.back();
		heap.pop_back();

		heapifyDown(index);
	}

    void print() {
        for (int value : heap) {
            cout << value << " ";
        }
        cout << endl;
    }
};

int main() {
    MaxHeap maxHeap;

    maxHeap.insert(3);
    maxHeap.insert(1);
    maxHeap.insert(4);
    maxHeap.insert(1);
    maxHeap.insert(5);
    maxHeap.insert(9);
    maxHeap.insert(2);

    cout << "Max Heap: ";
    maxHeap.print();

    return 0;
}
