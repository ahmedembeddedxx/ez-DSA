#include <iostream>
#include <algorithm>

using namespace std;

class Node
{
public:
	int data;
	Node* left;
	Node* right;
	Node(int v = 0)
	{
		this->data = v;
		left = nullptr;
		right = nullptr;
	}
	~Node()
	{
	}
};

class BST
{
	Node* root;
	int getHeight(Node* node) const
	{
		if (node == nullptr)
			return 0;
		int left = getHeight(node->left);
		int right = getHeight(node->right);
		return max(left, right) + 1;
	}
	Node* deepcopy(Node* curr)
	{
		if (curr == nullptr)
			return curr;
		Node* newNode = new Node(curr->data);
		newNode->left = deepcopy(curr->left);
		newNode->right = deepcopy(curr->right);
		return newNode;
	}
	bool insert(int v, Node*& curr)
	{
		if (curr == nullptr)
		{
			curr = new Node(v);
			return true;
		}
		else if (v < curr->data)
			return insert(v, curr->left);
		else if (v > curr->data)
			return insert(v, curr->right);
		return false;
	}
	void printFirstRight(Node* curr, int level)
	{
		if (curr == nullptr)
			return;
		if (level == 1)
			cout << curr->data << " ";
		else if (level > 1)
			printFirstRight(curr->right, level - 1);
	}
	void printFirstLeft(Node* curr, int level)
	{
		if (curr == nullptr)
			return;
		if (level == 1)
			cout << curr->data << " ";
		else if (level > 1)
			printFirstLeft(curr->left, level - 1);
	}
	Node* inordertoBST(int arr[], int start, int end)
	{
		if (start > end) {
			return nullptr;
		}

		int mid = (start + end) / 2;
		Node* newNode = new Node(arr[mid]);

		newNode->left = inordertoBST(arr, start, mid - 1);
		newNode->right = inordertoBST(arr, mid + 1, end);

		return newNode;
	}
	Node* preordertoBST(int arr[], int& index, int minValue, int maxValue, int size) {
		if (index == size || arr[index] < minValue || arr[index] > maxValue) {
			return nullptr;
		}

		Node* newNode = new Node(arr[index]);
		index++;

		newNode->left = preordertoBST(arr, index, minValue, newNode->data + 1, size);
		newNode->right = preordertoBST(arr, index, newNode->data - 1, maxValue, size);

		return newNode;
	}
	Node* postordertoBST(int arr[], int& index, int minValue, int maxValue, int size) {
		if (index == size || arr[index] < minValue || arr[index] > maxValue) {
			return nullptr;
		}

		Node* newNode = new Node(arr[index]);
		index--;

		newNode->right = postordertoBST(arr, index, newNode->data + 1, maxValue, size);
		newNode->left = postordertoBST(arr, index, minValue, newNode->data - 1, size);

		return newNode;
	}
	Node* minValueNode(Node* node)
	{
		Node* current = node;

		while (current->left != nullptr)
			current = current->left;

		return current;
	}
	Node* deleteNode(Node* root, int key)
	{
		if (root == nullptr)
			return root;

		if (key < root->data)
			root->left = deleteNode(root->left, key);
		else if (key > root->data)
			root->right = deleteNode(root->right, key);
		else
		{
			if (root->left == nullptr)
			{
				Node* temp = root->right;
				delete root;
				return temp;
			}
			else if (root->right == nullptr)
			{
				Node* temp = root->left;
				delete root;
				return temp;
			}

			Node* temp = minValueNode(root->right);

			root->data = temp->data;

			root->right = deleteNode(root->right, temp->data);
		}
		return root;
	}

public:
	BST()
	{
		root = nullptr;
	}
	BST(const BST& other)
	{
		root = deepcopy(other.root);
	}

	void printLevel(Node* curr, int level)
	{
		if (curr == nullptr)
			return;
		if (level == 1)
			cout << curr->data << " ";
		else if (level > 1)
		{
			printLevel(curr->left, level - 1);
			printLevel(curr->right, level - 1);
		}
	}
	void levelorderPrint()
	{
		if (root == nullptr)
			return;
		int h = getHeight(root);

		for (int i = 1; i <= h; i++)
		{
			printLevel(root, i);
			cout << endl;
		}

	}
	bool insert(int v)
	{
		return insert(v, root);
	}
	void inorderPrint(int i = 0, Node* curr = nullptr)
	{
		if (i == 0)
			curr = root;
		if (curr == nullptr)
			return;
		inorderPrint(1, curr->left);
		cout << curr->data << " ";
		inorderPrint(1, curr->right);
	}
	void preorderPrint(int i = 0, Node* curr = nullptr)
	{
		if (i == 0)
			curr = root;
		if (curr == nullptr)
			return;
		cout << curr->data << " ";
		preorderPrint(1, curr->left);
		preorderPrint(1, curr->right);
	}
	void postorderPrint(int i = 0, Node* curr = nullptr)
	{
		if (i == 0)
			curr = root;
		if (curr == nullptr)
			return;
		postorderPrint(1, curr->left);
		postorderPrint(1, curr->right);
		cout << curr->data << " ";
	}


	Node* search(int key, int i = 0, Node* curr = nullptr)
	{
		if (i == 0)
			curr = root;
		if (curr == nullptr)
			return curr;
		if (key == curr->data)
			return curr;
		if (key < curr->data)
			return search(key, 1, curr->left);
		else
			return search(key, 1, curr->right);
	}
	int countNodes(int i = 0, Node* curr = nullptr)
	{
		if (i == 0)
			curr = root;
		return (curr == nullptr) ? 0 : countNodes(1, curr->left) + countNodes(1, curr->right) + 1;
	}
	int leafCount(int i = 0, Node* curr = nullptr)
	{
		if (i == 0)
			curr = root;
		if (curr == nullptr)
			return 0;
		if (curr->left == nullptr && curr->right == nullptr)
			return 1;
		return leafCount(1, curr->left) + leafCount(1, curr->right);
	}
	void destroy(Node* curr)
	{
		if (curr == nullptr)
			return;
		destroy(curr->left);
		destroy(curr->right);
		delete curr;
	}
	void inordertoBST(int arr[], int size)
	{
		sort(arr, arr + size);
		root = inordertoBST(arr, 0, size - 1);
	}
	void preordertoBST(int arr[], int size)
	{
		int index = 0;
		root = preordertoBST(arr, index, (INT_MIN), INT_MAX, size);
	}
	void postordertoBST(int arr[], int size)
	{
		int index = size - 1;
		root = postordertoBST(arr, index, INT_MIN, INT_MAX, size);
	}
	void print_side_view(int i = 0, Node* curr = nullptr)
	{
		if (root == nullptr)
			return;
		int h = getHeight(root);

		for (int i = 1; i <= h; i++)
		{
			printFirstLeft(root, i);
			cout << "\t";
			printFirstRight(root, i);
			cout << endl;
		}
	}
	~BST()
	{
		this->destroy(root);
	}
};


int main()
{
	BST tree1;
	int arr1[] = { 1, 2, 3, 4, 5, 6, 7 };
	tree1.inordertoBST(arr1, 7);
	tree1.inorderPrint();
	cout << endl;
	BST tree2;
	int arr2[] = { 7, 3, 1, 2, 8, 6, 9 };
	tree2.preordertoBST(arr2, 7);
	tree2.preorderPrint();
	cout << endl;

	BST tree3;
	int arr3[] = { 1, 2, 3, 6, 9, 8, 7 };
	tree3.postordertoBST(arr3, 7);
	tree3.postorderPrint();

}
