#include <iostream>
#include <windows.h>
#include <conio.h>
#include <cstring>

using namespace std;

class Node {
public:
	Node* left;
	Node* right;
	Node* up;
	Node* down;
	Node()
	{
		left = right = up = down = nullptr;
	}
	~Node()
	{
	}
	friend class Digit;
};

class Digit {
	Node* nodes[6];
	int data;
	void connectRight(int from, int to) {
		nodes[from]->right = nodes[to];
		nodes[to]->left = nodes[from];
	}
	void connectDown(int from, int to) {
		nodes[from]->down = nodes[to];
		nodes[to]->up = nodes[from];
	}
	void connReset()
	{
		for (int i = 0; i < 6; i++)
			nodes[i]->down = nodes[i]->left = nodes[i]->right = nodes[i]->up = nullptr;
	}
	friend class Time;

public:
	Digit(int k = 0)
	{
		for (int i = 0; i < 6; i++)
			nodes[i] = new Node();
		data = k;
		formDigit(k);
	}
	void formDigit(int i = 0) {
		i = data;
		int numcodes[10][6] = {
			{0, 1, 1, 1, 2, 3},
			{3, 1, 3, 1, 3, 3},
			{2, 1, 0, 3, 2, 3},
			{2, 1, 2, 1, 2, 3},
			{1, 1, 2, 1, 3, 3},
			{0, 3, 2, 1, 2, 3},
			{0, 3, 0, 1, 2, 3},
			{2, 1, 3, 1, 3, 3},
			{0, 1, 0, 1, 2, 3},
			{0, 1, 2, 1, 2, 3}
		};
		connReset();
		for (int j = 0; j < 6; j++)
		{
			if (numcodes[i][j] == 0)
			{
				connectRight(j, j + 1);
				connectDown(j, j + 2);
			}
			else if (numcodes[i][j] == 1)
				connectDown(j, j + 2);
			else if (numcodes[i][j] == 2)
				connectRight(j, j + 1);
		}

	}
	~Digit()
	{
	}
};

class Time {
	Digit* digits[4];

public:
	Time()
	{
		digits[0] = new Digit(1);
		digits[1] = new Digit(1);
		digits[2] = new Digit(0);
		digits[3] = new Digit(8);
	}
	void print()
	{
		for (int i = 0; i < 6; i += 2)
		{
			for (int j = 0; j < 4; j++)
			{
				if (digits[j]->nodes[i]->right != nullptr)
					cout << " ******* \t";
				else
					cout << "\t\t";
			}
			cout << endl;
			for (int j = 0; j < 4; j++)
			{
				if (digits[j]->nodes[i]->down != nullptr)
					cout << "|\t";
				else
					cout << "\t";
				if (digits[j]->nodes[i + 1]->down != nullptr)
					cout << "|\t";
				else
					cout << "\t";
			}
			cout << endl;
		}
	}
	void AddMins(int j = 1)
	{
		digits[3]->data += j;
		while (digits[3]->data >= 10)
		{
			digits[3]->data -= 10;
			digits[2]->data++;
			if (digits[2]->data >= 6)
			{
				digits[2]->data = 0;
				digits[1]->data++;
				if (digits[1]->data >= 10)
				{
					digits[1]->data %= 10;
					digits[0]->data++;
				}
				if (digits[0]->data == 2 && digits[1]->data == 4)
				{
					digits[0]->data = 0;
					digits[1]->data = 0;
				}
			}
		}
		for (int i = 0; i < 4; i++)
			digits[i]->formDigit();
	}

	void AddHours(int j = 1)
	{
		digits[1]->data += j;
		while (digits[1]->data >= 10 || (digits[0]->data == 2 && digits[1]->data >= 4))
		{
			if (digits[0]->data == 2 && digits[1]->data >= 4)
			{
				digits[0]->data = 0;
				digits[1]->data = 0;
			}
			else
			{
				digits[1]->data %= 10;
				digits[0]->data++;
			}
		}
		for (int i = 0; i < 4; i++)
			digits[i]->formDigit();
	}

	void SubMins(int j = 1)
	{
		digits[3]->data -= j;
		while (digits[3]->data < 0)
		{
			digits[2]->data--;
			if (digits[2]->data < 0)
			{
				digits[2]->data = 5;
				digits[1]->data--;
				if (digits[1]->data < 0)
				{
					digits[1]->data = 9;
					digits[0]->data--;
					if (digits[0]->data < 0)
					{
						digits[0]->data = 2;
						digits[1]->data = 3;
					}
				}
			}
			digits[3]->data += 10;
		}
		for (int i = 0; i < 4; i++)
			digits[i]->formDigit();
	}

	void SubHours(int j = 1)
	{
		digits[1]->data -= j;
		while (digits[1]->data < 0 || (digits[0]->data == 0 && digits[1]->data < 0))
		{
			if (digits[0]->data == 0 && digits[1]->data < 0)
			{
				digits[0]->data = 2;
				digits[1]->data = 3;
			}
			else
			{
				digits[1]->data += 10;
				digits[0]->data--;
			}
		}
		for (int i = 0; i < 4; i++)
			digits[i]->formDigit();
	}

};

int main() {
	Time T;

	while (true) {
		system("cls");
		T.print();
		cout << "'m' for Incrementing Minutes by 1\n";
		cout << "'n' for Decrementing Minutes by 1\n";
		cout << "'x' for Incrementing Hours by 1\n";
		cout << "'z' for Decrementing Hours by 1\n";
		cout << "'T' for Terminating\n";
		char c = _getch();

		switch (c) {
		case 'm':
			T.AddMins();
			break;
		case 'x':
			T.AddHours();
			break;
		case 'n':
			T.SubMins();
			break;
		case 'z':
			T.SubHours();
			break;
		case 'T':
		case 't':
			return 0;
		default:
			cout << "Invalid input\n";
		}
	}
	return 0;
}
