#include <iostream>
using namespace std;

template <class T>
class Node;

template <class T>
class LinkedList;

template <class T>
class Node
{
private:
	T data;
	Node<T>* next;
	friend class LinkedList<T>;

public:
	Node(T data)
	{
		this->data = data;
		next = nullptr;
	}
	~Node()
	{
	}
};

template <class T>
class LinkedList
{
	Node<T>* head;

public:
	LinkedList()
	{
		head = nullptr;
	}
	void push(const T& data)
	{
		Node<T>* newNode = new Node<T>(data);
		if (head == nullptr)
		{
			head = newNode;
			return;
		}
		Node<T>* current = head;
		while (current->next != nullptr)
			current = current->next;
		current->next = newNode;
	}
	void push(Node<T>* newNode)
	{
		if (head == nullptr)
		{
			head = newNode;
			return;
		}
		Node<T>* current = head;
		while (current->next != nullptr)
			current = current->next;
		current->next = newNode;
	}
	void push(LinkedList<T>& newList)
	{
		if (head == nullptr)
		{
			head = newList.head;
			return;
		}
		Node<T>* current = head;
		while (current->next != nullptr)
			current = current->next;
		current->next = newList.head;
	}
	int size()
	{
		Node<T>* curr = head;
		int ctr = 0;
		while (curr != nullptr)
		{
			ctr++;
			curr = curr->next;
		}
		return ctr;
	}

	LinkedList<LinkedList<T>> parse(int k)
	{
		if (k <= 1)
			k = 1;
		else if (k > size())
			k = size();
		LinkedList<LinkedList<T>> sublists;
		if (head == nullptr)
			return sublists;

		int size = this->size();
		Node<T>* curr = head;
		for (int i = 0; i < k && curr != nullptr; i++)
		{
			LinkedList<T> temp;
			int sublistSize;
			if (i < size % k)
				sublistSize = size / k + 1;
			else
				sublistSize = size / k;
			for (int j = 0; j < sublistSize && curr != nullptr; j++, curr = curr->next)
				temp.push(curr->data);
			sublists.push(temp);
		}
		return sublists;
	}

	void print()
	{
		Node<T>* curr = head;
		cout << "->[";
		while (curr != nullptr)
		{
			cout << curr->data;
			if (curr->next != nullptr)
				cout << "->";
			curr = curr->next;
		}
		cout << "]";
	}

	void printsublist()
	{
		Node<T>* curr = head;
		while (curr != nullptr)
		{
			curr->data.print();
			curr = curr->next;
		}
	}
	~LinkedList()
	{
	}
};

int main() 
{
	LinkedList<int> L1;

	while (true) 
	{
		cout << "Menu:" << endl;
		cout << "1. Push Element" << endl;
		cout << "2. Parse List" << endl;
		cout << "3. Show List" << endl;
		cout << "4. Exit" << endl;
		cout << "Enter your choice: ";

		int choice;
		cin >> choice;

		switch (choice) 
		{
		case 1:
			int element;
			cout << "Enter element to push: ";
			cin >> element;
			L1.push(element);
			break;

		case 2:
			int k;
			cout << "Enter value of k for parsing: ";
			cin >> k;
			if (k <= 0) 
				cout << "Invalid value of k. Please enter a positive integer." << endl;
			else 
			{
				cout << "Parsing with k = " << k << ":" << endl;
				LinkedList<LinkedList<int>> SL = L1.parse(k);
				SL.printsublist();
				cout << endl;
			}
			break;

		case 3:
			cout << "Original List:" << endl;
			L1.print();
			cout << endl;
			break;

		case 4:
			cout << "Exiting program." << endl;
			return 0;

		default:
			cout << "Invalid choice. Please select a valid option." << endl;
		}
	}

	return 0;
}
