#include <iostream>
using namespace std;


class JosephusList;
class PersonNode
{
	friend class JosephusList;
	int id;
	PersonNode* next;
public:
	PersonNode(int id)
	{
		next = NULL;
		this->id = id;
	}
};
class JosephusList
{
	PersonNode* head;
public:
	JosephusList(int N)
	{
		head = nullptr;
		if (N > 1)
		{
			for (int i = 1; i <= N; i++)
				insertNode(i);
		}
		PersonNode* curr = head;
		while (curr->next != nullptr) {
			curr = curr->next;
		}
		curr->next = head;
	}
	void insertNode(int N) {
		PersonNode* temp = new PersonNode(N);
		temp->next = nullptr;

		if (head == nullptr) {
			head = temp;
		}
		else {
			PersonNode* curr = head;
			while (curr->next != nullptr) {
				curr = curr->next;
			}
			curr->next = temp;
		}
	}
	int getWinner(int M)
	{
		PersonNode* curr = head;
		PersonNode* prev = nullptr;

		while (curr->next != curr)
		{
			for (int i = 0; i < M; i++)
			{
				prev = curr;
				curr = curr->next;
			}
			prev->next = curr->next;
			PersonNode* temp = curr;
			curr = curr->next;
			delete temp;
		}
		return curr->id;
	}

	void display()
	{
		if (head == nullptr)
		{
			cout << "List is empty." << endl;
			return;
		}
		cout << head->id << endl;
	}


	~JosephusList()
	{
		//no explicit def required
	}

};

int main() {


	JosephusList j(5);
	j.display();
	cout << j.getWinner(3) << endl;


	return 0;
}
